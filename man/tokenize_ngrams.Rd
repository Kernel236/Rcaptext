% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tokenization.R
\name{tokenize_ngrams}
\alias{tokenize_ngrams}
\title{Tokenize Text into N-grams}
\usage{
tokenize_ngrams(corpus, n = 2, text_col = "text")
}
\arguments{
\item{corpus}{A tibble containing at least a text column.}

\item{n}{Integer. Length of the n-gram (2 = bigram, 3 = trigram, etc.).
Must be >= 2.}

\item{text_col}{Character or unquoted column name containing text to tokenize.
Default is "text".}
}
\value{
A tibble with one row per n-gram and preserved columns from input.
  The text column is replaced with an "ng" column containing the n-gram string.
}
\description{
This function creates n-grams (sequences of n consecutive words) from text.
Common values are n=2 (bigrams) and n=3 (trigrams), useful for capturing
word context and building language models.
}
\details{
N-grams are created as space-separated strings of consecutive words.
For example, the text "hello world example" would create:
\itemize{
  \item Bigrams (n=2): "hello world", "world example"
  \item Trigrams (n=3): "hello world example"
}
}
\examples{
\dontrun{
# Create bigrams
corpus <- load_corpus("en_US") 
bigrams <- tokenize_ngrams(corpus, n = 2)
head(bigrams)

# Create trigrams
trigrams <- tokenize_ngrams(corpus, n = 3)
head(trigrams)

# Custom text column
custom_data <- tibble::tibble(
  content = c("Natural language processing", "Machine learning algorithms")
)
ngrams <- tokenize_ngrams(custom_data, n = 2, text_col = "content")
}

}
\seealso{
\code{\link{tokenize_bigrams}}, \code{\link{tokenize_trigrams}} for convenience functions
}
