% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pruning.R
\name{prune_topN_per_history}
\alias{prune_topN_per_history}
\title{Keep top-N continuations per history context}
\usage{
prune_topN_per_history(tbl, history_cols, target_col, N = 10)
}
\arguments{
\item{tbl}{A data frame containing n-gram data with conditional probabilities.}

\item{history_cols}{Character vector specifying the column names that define
the history context. Examples:
\itemize{
  \item For bigrams: \code{c("w1")} - group by first word
  \item For trigrams: \code{c("w1", "w2")} - group by first two words
}}

\item{target_col}{Unquoted column name containing the probability or score
to rank by (e.g., \code{p_cond} for conditional probability). The function
will keep the N highest values of this column for each history context.}

\item{N}{Integer. Maximum number of continuations to keep per history context
(default: 10). If a history context has fewer than N continuations, all are kept.}
}
\value{
A data frame with the same structure as input, but containing at most
  N rows for each unique combination of history_cols values. Rows are selected
  based on the highest values of target_col, with ties broken deterministically.
}
\description{
For each unique history context (e.g., previous word(s)), keeps only the top N
most probable continuations based on a target probability column. This dramatically
reduces model size while preserving the most important predictions for each context.
Essential for building compact, efficient language models.
}
\examples{
# Create bigram data with conditional probabilities
bigrams <- data.frame(
  w1 = rep(c("the", "a"), each = 4),
  w2 = c("cat", "dog", "bird", "fish", "book", "car", "house", "tree"),
  n = c(10, 8, 5, 2, 6, 4, 3, 1),
  p_cond = c(0.4, 0.32, 0.2, 0.08, 0.43, 0.29, 0.21, 0.07)
)

# Keep top 2 continuations for each first word
top2 <- prune_topN_per_history(
  bigrams, 
  history_cols = c("w1"), 
  target_col = p_cond, 
  N = 2
)
print(top2)
# For "the": keeps "cat" (0.4) and "dog" (0.32)
# For "a": keeps "book" (0.43) and "car" (0.29)

# Example with trigrams
trigrams <- data.frame(
  w1 = rep("the", 6),
  w2 = rep(c("big", "small"), each = 3), 
  w3 = rep(c("cat", "dog", "bird"), 2),
  p_cond = c(0.5, 0.3, 0.2, 0.6, 0.25, 0.15)
)

# Keep top 2 continuations for each (w1, w2) pair
top2_tri <- prune_topN_per_history(
  trigrams,
  history_cols = c("w1", "w2"),
  target_col = p_cond,
  N = 2
)
print(top2_tri)

}
